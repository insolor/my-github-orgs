# Generated by ariadne-codegen
# Source: get_data.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetUserOrgs(BaseModel):
    user: Optional["GetUserOrgsUser"]


class GetUserOrgsUser(BaseModel):
    avatar_url: Any = Field(alias="avatarUrl")
    login: str
    name: Optional[str]
    url: Any
    repositories: "GetUserOrgsUserRepositories"
    organizations: "GetUserOrgsUserOrganizations"


class GetUserOrgsUserRepositories(BaseModel):
    nodes: Optional[List[Optional["GetUserOrgsUserRepositoriesNodes"]]]


class GetUserOrgsUserRepositoriesNodes(BaseModel):
    name: str
    name_with_owner: str = Field(alias="nameWithOwner")
    description: Optional[str]
    url: Any
    updated_at: Any = Field(alias="updatedAt")
    pushed_at: Optional[Any] = Field(alias="pushedAt")
    stargazer_count: int = Field(alias="stargazerCount")
    issues: "GetUserOrgsUserRepositoriesNodesIssues"
    parent: Optional["GetUserOrgsUserRepositoriesNodesParent"]


class GetUserOrgsUserRepositoriesNodesIssues(BaseModel):
    total_count: int = Field(alias="totalCount")


class GetUserOrgsUserRepositoriesNodesParent(BaseModel):
    name: str
    name_with_owner: str = Field(alias="nameWithOwner")
    description: Optional[str]
    url: Any
    stargazer_count: int = Field(alias="stargazerCount")


class GetUserOrgsUserOrganizations(BaseModel):
    nodes: Optional[List[Optional["GetUserOrgsUserOrganizationsNodes"]]]


class GetUserOrgsUserOrganizationsNodes(BaseModel):
    avatar_url: Any = Field(alias="avatarUrl")
    login: str
    name: Optional[str]
    description: Optional[str]
    url: Any
    repositories: "GetUserOrgsUserOrganizationsNodesRepositories"


class GetUserOrgsUserOrganizationsNodesRepositories(BaseModel):
    nodes: Optional[
        List[Optional["GetUserOrgsUserOrganizationsNodesRepositoriesNodes"]]
    ]


class GetUserOrgsUserOrganizationsNodesRepositoriesNodes(BaseModel):
    name: str
    name_with_owner: str = Field(alias="nameWithOwner")
    description: Optional[str]
    url: Any
    updated_at: Any = Field(alias="updatedAt")
    pushed_at: Optional[Any] = Field(alias="pushedAt")
    stargazer_count: int = Field(alias="stargazerCount")
    issues: "GetUserOrgsUserOrganizationsNodesRepositoriesNodesIssues"
    parent: Optional["GetUserOrgsUserOrganizationsNodesRepositoriesNodesParent"]


class GetUserOrgsUserOrganizationsNodesRepositoriesNodesIssues(BaseModel):
    total_count: int = Field(alias="totalCount")


class GetUserOrgsUserOrganizationsNodesRepositoriesNodesParent(BaseModel):
    name: str
    name_with_owner: str = Field(alias="nameWithOwner")
    description: Optional[str]
    url: Any
    stargazer_count: int = Field(alias="stargazerCount")


GetUserOrgs.model_rebuild()
GetUserOrgsUser.model_rebuild()
GetUserOrgsUserRepositories.model_rebuild()
GetUserOrgsUserRepositoriesNodes.model_rebuild()
GetUserOrgsUserRepositoriesNodesIssues.model_rebuild()
GetUserOrgsUserRepositoriesNodesParent.model_rebuild()
GetUserOrgsUserOrganizations.model_rebuild()
GetUserOrgsUserOrganizationsNodes.model_rebuild()
GetUserOrgsUserOrganizationsNodesRepositories.model_rebuild()
GetUserOrgsUserOrganizationsNodesRepositoriesNodes.model_rebuild()
GetUserOrgsUserOrganizationsNodesRepositoriesNodesIssues.model_rebuild()
GetUserOrgsUserOrganizationsNodesRepositoriesNodesParent.model_rebuild()
