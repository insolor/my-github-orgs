# Generated by ariadne-codegen
# Source: get_data.graphql

from typing import Any, Dict

from .async_base_client import AsyncBaseClient
from .get_user_orgs import GetUserOrgs


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_user_orgs(self, login: str, **kwargs: Any) -> GetUserOrgs:
        query = gql(
            """
            query getUserOrgs($login: String!) {
              user(login: $login) {
                avatarUrl
                login
                name
                url
                repositories(
                  privacy: PUBLIC
                  ownerAffiliations: OWNER
                  isArchived: false
                  first: 20
                  orderBy: {field: PUSHED_AT, direction: DESC}
                ) {
                  nodes {
                    name
                    nameWithOwner
                    description
                    url
                    updatedAt
                    pushedAt
                    stargazerCount
                    issues {
                      totalCount
                    }
                    parent {
                      name
                      nameWithOwner
                      description
                      url
                      stargazerCount
                    }
                  }
                }
                organizations(first: 10) {
                  nodes {
                    avatarUrl
                    login
                    name
                    description
                    url
                    repositories(
                      privacy: PUBLIC
                      isArchived: false
                      first: 20
                      orderBy: {field: PUSHED_AT, direction: DESC}
                    ) {
                      nodes {
                        name
                        nameWithOwner
                        description
                        url
                        updatedAt
                        pushedAt
                        stargazerCount
                        issues {
                          totalCount
                        }
                        parent {
                          name
                          nameWithOwner
                          description
                          url
                          stargazerCount
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"login": login}
        response = await self.execute(query=query, variables=variables, **kwargs)
        data = self.get_data(response)
        return GetUserOrgs.model_validate(data)
